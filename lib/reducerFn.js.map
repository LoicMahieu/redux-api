{"version":3,"sources":["../src/reducerFn.js"],"names":["reducerFn","initialState","actions","reducer","actionFetch","actionSuccess","actionFail","actionReset","state","action","type","loading","error","syncing","sync","data","mutation"],"mappings":"AAAA;;AAEA;AACA;;;;;;;;;;;;;;;kBAQwBA,S;AAAT,SAASA,SAAT,CAAmBC,YAAnB,EAAsD;AAAA,MAArBC,OAAqB,uEAAb,EAAa;AAAA,MAATC,OAAS;AAAA,MAC3DC,WAD2D,GACHF,OADG,CAC3DE,WAD2D;AAAA,MAC9CC,aAD8C,GACHH,OADG,CAC9CG,aAD8C;AAAA,MAC/BC,UAD+B,GACHJ,OADG,CAC/BI,UAD+B;AAAA,MACnBC,WADmB,GACHL,OADG,CACnBK,WADmB;;AAEnE,SAAO,YAA+B;AAAA,QAA9BC,KAA8B,uEAAxBP,YAAwB;AAAA,QAAVQ,MAAU;;AACpC,YAAQA,OAAOC,IAAf;AACE,WAAKN,WAAL;AACE,4BACKI,KADL;AAEEG,mBAAS,IAFX;AAGEC,iBAAO,IAHT;AAIEC,mBAAS,CAAC,CAACJ,OAAOI;AAJpB;AAMF,WAAKR,aAAL;AACE,4BACKG,KADL;AAEEG,mBAAS,KAFX;AAGEG,gBAAM,IAHR;AAIED,mBAAS,KAJX;AAKED,iBAAO,IALT;AAMEG,gBAAMN,OAAOM;AANf;AAQF,WAAKT,UAAL;AACE,4BACKE,KADL;AAEEG,mBAAS,KAFX;AAGEC,iBAAOH,OAAOG,KAHhB;AAIEC,mBAAS;AAJX;AAMF,WAAKN,WAAL;AAAA,YACUS,QADV,GACuBP,MADvB,CACUO,QADV;;AAEE,eAAQA,aAAa,MAAd,gBACAR,KADA,IACOM,MAAM,KADb,mBAEAb,YAFA,CAAP;AAGF;AACE,eAAOE,UAAUA,QAAQK,KAAR,EAAeC,MAAf,CAAV,GAAmCD,KAA1C;AA9BJ;AAgCD,GAjCD;AAkCD","file":"reducerFn.js","sourcesContent":["\"use strict\";\n\n/* eslint no-case-declarations: 0 */\n/**\n * Reducer contructor\n * @param  {Object}   initialState default initial state\n * @param  {Object}   actions      actions map\n * @param  {Function} transformer  transformer function\n * @param  {Function} reducer      custom reducer function\n * @return {Function}              reducer function\n */\nexport default function reducerFn(initialState, actions={}, reducer) {\n  const { actionFetch, actionSuccess, actionFail, actionReset } = actions;\n  return (state=initialState, action)=> {\n    switch (action.type) {\n      case actionFetch:\n        return {\n          ...state,\n          loading: true,\n          error: null,\n          syncing: !!action.syncing\n        };\n      case actionSuccess:\n        return {\n          ...state,\n          loading: false,\n          sync: true,\n          syncing: false,\n          error: null,\n          data: action.data\n        };\n      case actionFail:\n        return {\n          ...state,\n          loading: false,\n          error: action.error,\n          syncing: false\n        };\n      case actionReset:\n        const { mutation } = action;\n        return (mutation === \"sync\") ?\n          { ...state, sync: false } :\n          { ...initialState };\n      default:\n        return reducer ? reducer(state, action) : state;\n    }\n  };\n}\n"]}